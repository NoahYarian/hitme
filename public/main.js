"use strict";

var API = "http://deckofcardsapi.com/api/";
var newDeckURL = API + "shuffle/?deck_count=6";
var cardBack = "http://tinyurl.com/kqzzmbr";

var game;
var deckId = "";
var score = 0;
var count = 0;

//buttons
var $newGame = $(".newGame");
var $hit = $(".hit");
var $stay = $(".stay");

//scoreboard divs
var $score = $(".score");
var $count = $(".count");
var $winner = $(".winner");

//card hand divs
var $dealer = $(".dealer");
var $player = $(".player");

//button click listeners
$newGame.click(newGame);
$hit.click(hit);
$stay.click(stay);

//game object
function Game() {
  this.hiddenCard = "";
  this.dealerHand = [];
  this.playerHand = [];
  this.dealerTotal = 0;
  this.playerTotal = 0;
  this.winner = "";
}

function newGame() {
  game = new Game();
  deal();
}

function deal() {
  clearTable();
  $newGame.attr("disabled", true);
  $hit.attr("disabled", false);
  $stay.attr("disabled", false);

  if (deckId === "") {
    getJSON(newDeckURL, function (data) {
      deckId = data.deck_id;
      console.log("About to deal from new deck");
      draw4();
    });
  } else {
    console.log("About to deal from current deck");
    draw4();
  }
}

function draw4() {
  drawCard({
    person: "dealer",
    image: cardBack
  });
  drawCard({
    person: "player"
  });
  drawCard({
    person: "dealer"
  });
  drawCard({
    person: "player"
  });
}

function drawCard(options) {
  var cardURL = API + "draw/" + deckId + "/?count=1";
  getJSON(cardURL, function (data, cb) {
    if (options.image) {
      var html = "<img class='cardImage' src='" + options.image + "'>";
      $("." + options.person).append(html);
      game.hiddenCard = data.cards[0].image;
    } else {
      var html = "<img class='cardImage' src='" + data.cards[0].image + "'>";
      $("." + options.person).append(html);
    }
    if (options.person === "dealer") {
      game.dealerHand.push(data.cards[0].value);
      checkDealerTotal();
      console.log("dealer's hand - " + game.dealerHand + " **** dealer is at " + game.dealerTotal);
    } else if (options.person === "player") {
      game.playerHand.push(data.cards[0].value);
      checkPlayerTotal();
      console.log("player's hand - " + game.playerHand + " **** player is at " + game.playerTotal);
    }
    checkVictory();
    updateCount(data.cards[0].value);
    typeof options.callback === "function" && options.callback();
  });
}

function checkPlayerTotal() {
  game.playerTotal = 0;
  game.playerHand.forEach(function (card) {
    if (card === "KING" || card === "QUEEN" || card === "JACK") {
      game.playerTotal += 10;
    } else if (!isNaN(card)) {
      game.playerTotal += Number(card);
    }
  });
  game.playerHand.forEach(function (card) {
    if (card === "ACE") {
      if (game.playerTotal <= 10) {
        game.playerTotal += 11;
      } else {
        game.playerTotal += 1;
      }
    }
  });
}

function checkDealerTotal() {
  game.dealerTotal = 0;
  game.dealerHand.forEach(function (card) {
    if (card === "KING" || card === "QUEEN" || card === "JACK") {
      game.dealerTotal += 10;
    } else if (!isNaN(card)) {
      game.dealerTotal += Number(card);
    }
  });
  game.dealerHand.forEach(function (card) {
    if (card === "ACE") {
      if (game.dealerTotal <= 10) {
        game.dealerTotal += 11;
      } else {
        game.dealerTotal += 1;
      }
    }
  });
}

function checkVictory() {
  if (game.dealerTotal === 21) {
    console.log("dealer has 21");
    game.winner = "dealer";
    score -= 1;
  } else if (game.dealerTotal > 21) {
    console.log("dealer busts");
    game.winner = "player";
    score += 1;
  }

  if (game.playerTotal === 21) {
    console.log("player has 21");
    game.winner = "player";
    score += 1;
  } else if (game.playerTotal > 21) {
    console.log("player busts");
    game.winner = "dealer";
    score -= 1;
  }

  if (game.winner !== "") {
    flipCard();
    updateScore();
    gameEnd();
  }
}

function gameEnd() {
  $winner.empty();
  $winner.append("<p>" + _.capitalize(game.winner) + " wins</p>");
  $newGame.attr("disabled", false);
  $hit.attr("disabled", true);
  $stay.attr("disabled", true);
}

function clearTable() {
  $dealer.empty();
  $player.empty();
  $winner.empty();
  console.log("--table cleared--");
}

function hit() {
  console.log("hit");
  drawCard({
    person: "player"
  });
}

function stay() {
  console.log("stay");
  flipCard();
  if (game.winner === "" && game.dealerTotal < 17) {
    drawCard({
      person: "dealer",
      callback: stay
    });
  } else {
    game.dealerTotal >= game.playerTotal ? (game.winner = "dealer", score -= 1, console.log("dealer's " + game.dealerTotal + " beats player's " + game.playerTotal)) : (game.winner = "player", score += 1, console.log("player's " + game.playerTotal + " beats dealer's " + game.dealerTotal));
    gameEnd();
  }
}

function flipCard() {
  var $flipped = $(".dealer .cardImage");
  $flipped.first().attr("src", game.hiddenCard);
}

function updateScore() {
  $score.empty();
  $score.append("<p>Score: " + score + "</p>");
}

function updateCount(card) {
  if (isNaN(Number(card)) || card === "10") {
    count -= 1;
  } else if (card < 7) {
    count += 1;
  }
  $count.empty();
  $count.append("<p>Count: " + count + "</p>");
}

// JSON request function with JSONP proxy
function getJSON(url, cb) {
  var JSONP_PROXY = "https://jsonp.afeld.me/?url=";
  // THIS WILL ADD THE CROSS ORIGIN HEADERS
  var request = new XMLHttpRequest();
  request.open("GET", JSONP_PROXY + url);
  request.onload = function () {
    if (request.status >= 200 && request.status < 400) {
      cb(JSON.parse(request.responseText));
    }
  };
  request.send();
}
//# sourceMappingURL=data:application/json;base64,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QUFNLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDZixRQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUM7Q0FDOUM7O0FBRUQsU0FBUyxXQUFXLENBQUMsSUFBSSxFQUFFO0FBQ3pCLE1BQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7QUFDeEMsU0FBSyxJQUFJLENBQUMsQ0FBQztHQUNaLE1BQU0sSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFO0FBQ25CLFNBQUssSUFBSSxDQUFDLENBQUM7R0FDWjtBQUNELFFBQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNmLFFBQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQztDQUM5Qzs7O0FBR0QsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRTtBQUN4QixNQUFJLFdBQVcsR0FBRyw4QkFBOEIsQ0FBQTs7QUFFaEQsTUFBSSxPQUFPLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztBQUNuQyxTQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxXQUFXLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDdkMsU0FBTyxDQUFDLE1BQU0sR0FBRyxZQUFXO0FBQzFCLFFBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxHQUFHLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7QUFDakQsUUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7S0FDdEM7R0FDRixDQUFDO0FBQ0YsU0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0NBQ2hCIiwiZmlsZSI6InNyYy9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIEFQSSA9IFwiaHR0cDovL2RlY2tvZmNhcmRzYXBpLmNvbS9hcGkvXCI7XG52YXIgbmV3RGVja1VSTCA9IEFQSSArIFwic2h1ZmZsZS8/ZGVja19jb3VudD02XCI7XG52YXIgY2FyZEJhY2sgPSBcImh0dHA6Ly90aW55dXJsLmNvbS9rcXp6bWJyXCI7XG5cbnZhciBnYW1lO1xudmFyIGRlY2tJZCA9IFwiXCI7XG52YXIgc2NvcmUgPSAwO1xudmFyIGNvdW50ID0gMDtcblxuLy9idXR0b25zXG52YXIgJG5ld0dhbWUgPSAkKFwiLm5ld0dhbWVcIik7XG52YXIgJGhpdCA9ICQoXCIuaGl0XCIpO1xudmFyICRzdGF5ID0gJChcIi5zdGF5XCIpO1xuXG4vL3Njb3JlYm9hcmQgZGl2c1xudmFyICRzY29yZSA9ICQoXCIuc2NvcmVcIik7XG52YXIgJGNvdW50ID0gJChcIi5jb3VudFwiKTtcbnZhciAkd2lubmVyID0gJChcIi53aW5uZXJcIik7XG5cbi8vY2FyZCBoYW5kIGRpdnNcbnZhciAkZGVhbGVyID0gJChcIi5kZWFsZXJcIik7XG52YXIgJHBsYXllciA9ICQoXCIucGxheWVyXCIpO1xuXG4vL2J1dHRvbiBjbGljayBsaXN0ZW5lcnNcbiRuZXdHYW1lLmNsaWNrKG5ld0dhbWUpO1xuJGhpdC5jbGljayhoaXQpO1xuJHN0YXkuY2xpY2soc3RheSk7XG5cbi8vZ2FtZSBvYmplY3RcbmZ1bmN0aW9uIEdhbWUoKSB7XG4gIHRoaXMuaGlkZGVuQ2FyZCA9IFwiXCI7XG4gIHRoaXMuZGVhbGVySGFuZCA9IFtdO1xuICB0aGlzLnBsYXllckhhbmQgPSBbXTtcbiAgdGhpcy5kZWFsZXJUb3RhbCA9IDA7XG4gIHRoaXMucGxheWVyVG90YWwgPSAwO1xuICB0aGlzLndpbm5lciA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIG5ld0dhbWUoKSB7XG4gIGdhbWUgPSBuZXcgR2FtZSgpO1xuICBkZWFsKCk7XG59XG5cbmZ1bmN0aW9uIGRlYWwoKSB7XG4gIGNsZWFyVGFibGUoKTtcbiAgJG5ld0dhbWUuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xuICAkaGl0LmF0dHIoXCJkaXNhYmxlZFwiLCBmYWxzZSk7XG4gICRzdGF5LmF0dHIoXCJkaXNhYmxlZFwiLCBmYWxzZSk7XG5cbiAgaWYgKGRlY2tJZCA9PT0gXCJcIikge1xuICAgIGdldEpTT04obmV3RGVja1VSTCwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgZGVja0lkID0gZGF0YS5kZWNrX2lkO1xuICAgICAgY29uc29sZS5sb2coXCJBYm91dCB0byBkZWFsIGZyb20gbmV3IGRlY2tcIik7XG4gICAgICBkcmF3NCgpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKFwiQWJvdXQgdG8gZGVhbCBmcm9tIGN1cnJlbnQgZGVja1wiKTtcbiAgICBkcmF3NCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRyYXc0KCkge1xuICBkcmF3Q2FyZCh7XG4gICAgcGVyc29uOiBcImRlYWxlclwiLFxuICAgIGltYWdlOiBjYXJkQmFja1xuICB9KTtcbiAgZHJhd0NhcmQoe1xuICAgIHBlcnNvbjogXCJwbGF5ZXJcIlxuICB9KTtcbiAgZHJhd0NhcmQoe1xuICAgIHBlcnNvbjogXCJkZWFsZXJcIlxuICB9KTtcbiAgZHJhd0NhcmQoe1xuICAgIHBlcnNvbjogXCJwbGF5ZXJcIlxuICB9KTtcbn1cblxuZnVuY3Rpb24gZHJhd0NhcmQob3B0aW9ucykge1xuICB2YXIgY2FyZFVSTCA9IEFQSSArIFwiZHJhdy9cIiArIGRlY2tJZCArIFwiLz9jb3VudD0xXCI7XG4gIGdldEpTT04oY2FyZFVSTCwgZnVuY3Rpb24oZGF0YSwgY2IpIHtcbiAgICBpZiAob3B0aW9ucy5pbWFnZSkge1xuICAgICAgdmFyIGh0bWwgPSBcIjxpbWcgY2xhc3M9J2NhcmRJbWFnZScgc3JjPSdcIiArIG9wdGlvbnMuaW1hZ2UgKyBcIic+XCI7XG4gICAgICAkKFwiLlwiICsgb3B0aW9ucy5wZXJzb24pLmFwcGVuZChodG1sKTtcbiAgICAgIGdhbWUuaGlkZGVuQ2FyZCA9IGRhdGEuY2FyZHNbMF0uaW1hZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBodG1sID0gXCI8aW1nIGNsYXNzPSdjYXJkSW1hZ2UnIHNyYz0nXCIgKyBkYXRhLmNhcmRzWzBdLmltYWdlICsgXCInPlwiO1xuICAgICAgJChcIi5cIiArIG9wdGlvbnMucGVyc29uKS5hcHBlbmQoaHRtbCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnBlcnNvbiA9PT0gXCJkZWFsZXJcIikge1xuICAgICAgZ2FtZS5kZWFsZXJIYW5kLnB1c2goZGF0YS5jYXJkc1swXS52YWx1ZSk7XG4gICAgICBjaGVja0RlYWxlclRvdGFsKCk7XG4gICAgICBjb25zb2xlLmxvZyhcImRlYWxlcidzIGhhbmQgLSBcIiArIGdhbWUuZGVhbGVySGFuZCArIFwiICoqKiogZGVhbGVyIGlzIGF0IFwiICsgZ2FtZS5kZWFsZXJUb3RhbCk7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnBlcnNvbiA9PT0gXCJwbGF5ZXJcIikge1xuICAgICAgZ2FtZS5wbGF5ZXJIYW5kLnB1c2goZGF0YS5jYXJkc1swXS52YWx1ZSk7XG4gICAgICBjaGVja1BsYXllclRvdGFsKCk7XG4gICAgICBjb25zb2xlLmxvZyhcInBsYXllcidzIGhhbmQgLSBcIiArIGdhbWUucGxheWVySGFuZCArIFwiICoqKiogcGxheWVyIGlzIGF0IFwiICsgZ2FtZS5wbGF5ZXJUb3RhbCk7XG4gICAgfVxuICAgIGNoZWNrVmljdG9yeSgpO1xuICAgIHVwZGF0ZUNvdW50KGRhdGEuY2FyZHNbMF0udmFsdWUpO1xuICAgIHR5cGVvZiBvcHRpb25zLmNhbGxiYWNrID09PSAnZnVuY3Rpb24nICYmIG9wdGlvbnMuY2FsbGJhY2soKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrUGxheWVyVG90YWwoKSB7XG4gIGdhbWUucGxheWVyVG90YWwgPSAwO1xuICBnYW1lLnBsYXllckhhbmQuZm9yRWFjaChmdW5jdGlvbihjYXJkKSB7XG4gICAgaWYgKGNhcmQgPT09IFwiS0lOR1wiIHx8IGNhcmQgPT09IFwiUVVFRU5cIiB8fCBjYXJkID09PSBcIkpBQ0tcIikge1xuICAgICAgZ2FtZS5wbGF5ZXJUb3RhbCArPSAxMDtcbiAgICB9IGVsc2UgaWYgKCFpc05hTihjYXJkKSkge1xuICAgICAgZ2FtZS5wbGF5ZXJUb3RhbCArPSBOdW1iZXIoY2FyZCk7XG4gICAgfVxuICB9KTtcbiAgZ2FtZS5wbGF5ZXJIYW5kLmZvckVhY2goZnVuY3Rpb24oY2FyZCkge1xuICAgIGlmIChjYXJkID09PSBcIkFDRVwiKSB7XG4gICAgICBpZiAoZ2FtZS5wbGF5ZXJUb3RhbCA8PSAxMCkge1xuICAgICAgICBnYW1lLnBsYXllclRvdGFsICs9IDExO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2FtZS5wbGF5ZXJUb3RhbCArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRGVhbGVyVG90YWwoKSB7XG4gIGdhbWUuZGVhbGVyVG90YWwgPSAwO1xuICBnYW1lLmRlYWxlckhhbmQuZm9yRWFjaChmdW5jdGlvbihjYXJkKSB7XG4gICAgaWYgKGNhcmQgPT09IFwiS0lOR1wiIHx8IGNhcmQgPT09IFwiUVVFRU5cIiB8fCBjYXJkID09PSBcIkpBQ0tcIikge1xuICAgICAgZ2FtZS5kZWFsZXJUb3RhbCArPSAxMDtcbiAgICB9IGVsc2UgaWYgKCFpc05hTihjYXJkKSkge1xuICAgICAgZ2FtZS5kZWFsZXJUb3RhbCArPSBOdW1iZXIoY2FyZCk7XG4gICAgfVxuICB9KTtcbiAgZ2FtZS5kZWFsZXJIYW5kLmZvckVhY2goZnVuY3Rpb24oY2FyZCkge1xuICAgIGlmIChjYXJkID09PSBcIkFDRVwiKSB7XG4gICAgICBpZiAoZ2FtZS5kZWFsZXJUb3RhbCA8PSAxMCkge1xuICAgICAgICBnYW1lLmRlYWxlclRvdGFsICs9IDExO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2FtZS5kZWFsZXJUb3RhbCArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrVmljdG9yeSgpIHtcbiAgaWYgKGdhbWUuZGVhbGVyVG90YWwgPT09IDIxKSB7XG4gICAgY29uc29sZS5sb2coXCJkZWFsZXIgaGFzIDIxXCIpO1xuICAgIGdhbWUud2lubmVyID0gXCJkZWFsZXJcIjtcbiAgICBzY29yZSAtPSAxO1xuICB9IGVsc2UgaWYgKGdhbWUuZGVhbGVyVG90YWwgPiAyMSkge1xuICAgIGNvbnNvbGUubG9nKFwiZGVhbGVyIGJ1c3RzXCIpO1xuICAgIGdhbWUud2lubmVyID0gXCJwbGF5ZXJcIjtcbiAgICBzY29yZSArPSAxO1xuICB9XG5cbiAgaWYgKGdhbWUucGxheWVyVG90YWwgPT09IDIxKSB7XG4gICAgY29uc29sZS5sb2coXCJwbGF5ZXIgaGFzIDIxXCIpO1xuICAgIGdhbWUud2lubmVyID0gXCJwbGF5ZXJcIjtcbiAgICBzY29yZSArPSAxO1xuICB9IGVsc2UgaWYgKGdhbWUucGxheWVyVG90YWwgPiAyMSkge1xuICAgIGNvbnNvbGUubG9nKFwicGxheWVyIGJ1c3RzXCIpO1xuICAgIGdhbWUud2lubmVyID0gXCJkZWFsZXJcIjtcbiAgICBzY29yZSAtPSAxO1xuICB9XG5cbiAgaWYgKGdhbWUud2lubmVyICE9PSBcIlwiKSB7XG4gICAgZmxpcENhcmQoKTtcbiAgICB1cGRhdGVTY29yZSgpO1xuICAgIGdhbWVFbmQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnYW1lRW5kKCkge1xuICAkd2lubmVyLmVtcHR5KCk7XG4gICR3aW5uZXIuYXBwZW5kKFwiPHA+XCIgKyBfLmNhcGl0YWxpemUoZ2FtZS53aW5uZXIpICsgXCIgd2luczwvcD5cIik7XG4gICRuZXdHYW1lLmF0dHIoXCJkaXNhYmxlZFwiLCBmYWxzZSk7XG4gICRoaXQuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xuICAkc3RheS5hdHRyKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyVGFibGUoKSB7XG4gICRkZWFsZXIuZW1wdHkoKTtcbiAgJHBsYXllci5lbXB0eSgpO1xuICAkd2lubmVyLmVtcHR5KCk7XG4gIGNvbnNvbGUubG9nKFwiLS10YWJsZSBjbGVhcmVkLS1cIik7XG59XG5cbmZ1bmN0aW9uIGhpdCgpIHtcbiAgY29uc29sZS5sb2coXCJoaXRcIik7XG4gIGRyYXdDYXJkKHtcbiAgICBwZXJzb246IFwicGxheWVyXCJcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0YXkoKSB7XG4gIGNvbnNvbGUubG9nKFwic3RheVwiKTtcbiAgZmxpcENhcmQoKTtcbiAgaWYgKGdhbWUud2lubmVyID09PSBcIlwiICYmIGdhbWUuZGVhbGVyVG90YWwgPCAxNykge1xuICAgIGRyYXdDYXJkKHtcbiAgICAgIHBlcnNvbjogXCJkZWFsZXJcIixcbiAgICAgIGNhbGxiYWNrOiBzdGF5XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZ2FtZS5kZWFsZXJUb3RhbCA+PSBnYW1lLnBsYXllclRvdGFsID9cbiAgICAgIChnYW1lLndpbm5lciA9IFwiZGVhbGVyXCIsIHNjb3JlIC09IDEsIGNvbnNvbGUubG9nKFwiZGVhbGVyJ3MgXCIgKyBnYW1lLmRlYWxlclRvdGFsICsgXCIgYmVhdHMgcGxheWVyJ3MgXCIgKyBnYW1lLnBsYXllclRvdGFsKSkgOlxuICAgICAgKGdhbWUud2lubmVyID0gXCJwbGF5ZXJcIiwgc2NvcmUgKz0gMSwgY29uc29sZS5sb2coXCJwbGF5ZXIncyBcIiArIGdhbWUucGxheWVyVG90YWwgKyBcIiBiZWF0cyBkZWFsZXIncyBcIiArIGdhbWUuZGVhbGVyVG90YWwpKTtcbiAgICBnYW1lRW5kKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmxpcENhcmQoKSB7XG4gIHZhciAkZmxpcHBlZCA9ICQoXCIuZGVhbGVyIC5jYXJkSW1hZ2VcIik7XG4gICRmbGlwcGVkLmZpcnN0KCkuYXR0cihcInNyY1wiLCBnYW1lLmhpZGRlbkNhcmQpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTY29yZSgpIHtcbiAgJHNjb3JlLmVtcHR5KCk7XG4gICRzY29yZS5hcHBlbmQoXCI8cD5TY29yZTogXCIgKyBzY29yZSArIFwiPC9wPlwiKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ291bnQoY2FyZCkge1xuICBpZiAoaXNOYU4oTnVtYmVyKGNhcmQpKSB8fCBjYXJkID09PSBcIjEwXCIpIHtcbiAgICBjb3VudCAtPSAxO1xuICB9IGVsc2UgaWYgKGNhcmQgPCA3KSB7XG4gICAgY291bnQgKz0gMTtcbiAgfVxuICAkY291bnQuZW1wdHkoKTtcbiAgJGNvdW50LmFwcGVuZChcIjxwPkNvdW50OiBcIiArIGNvdW50ICsgXCI8L3A+XCIpO1xufVxuXG4vLyBKU09OIHJlcXVlc3QgZnVuY3Rpb24gd2l0aCBKU09OUCBwcm94eVxuZnVuY3Rpb24gZ2V0SlNPTih1cmwsIGNiKSB7XG4gIHZhciBKU09OUF9QUk9YWSA9ICdodHRwczovL2pzb25wLmFmZWxkLm1lLz91cmw9J1xuICAvLyBUSElTIFdJTEwgQUREIFRIRSBDUk9TUyBPUklHSU4gSEVBREVSU1xuICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIEpTT05QX1BST1hZICsgdXJsKTtcbiAgcmVxdWVzdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAocmVxdWVzdC5zdGF0dXMgPj0gMjAwICYmIHJlcXVlc3Quc3RhdHVzIDwgNDAwKSB7XG4gICAgICBjYihKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KSk7XG4gICAgfVxuICB9O1xuICByZXF1ZXN0LnNlbmQoKTtcbn1cbiJdfQ==